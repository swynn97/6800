AS02 Assembler for M6802 [1.42].                                     Page    1
---------------------------------- lcd.asm -----------------------------------

540 lines read, no errors in pass 1.
                        		title "lcd"
                        ;=====================================================
                        ;LCD driver and test code
                        ;
                        ;
                        ;=====================================================
                        ;
                        ;Equates
                        ;
e0e3 =                  CONTRL          equ 	$e0e3	;Return the TBUG    
8012 =                  PIABPR          equ     $8012
8013 =                  PIABCN		equ	$8013
e07e =                  PDATA		equ	$e07e
e1ac =                  INCH		equ	$e1ac
                        ;
                        ; Common ASCII control codes
                        ;
0004 =                  EOT             equ     $04
0007 =                  BEL             equ     $07
0008 =                  BS              equ     $08
000a =                  LF              equ     $0a
000c =                  FF		equ	$0c
000d =                  CR              equ     $0d
007f =                  DEL             equ     $7f
0000 =                  NULL		equ	$0
007f =                  RUB		equ	$7f
                        ;
0020 =                  SPACE		equ	$20	;space character
                        ;
                        ;LCD constants (now in driver code)
                        ;
0010 =                  LCDWIDTH	equ	16			;16x2 display
0002 =                  LCDROWS		equ	2
0020 =                  LCDBUFSZ        equ     LCDWIDTH*LCDROWS        ;size 
                        
                        ;
                        ; RAM area
                        ;
                                        bss
1000 =                                  org     $1000
                        ;
1000 =                  lcd_row		ds	1		;Current lcd row, 0 = top row	
1001 =                  lcd_col		ds	1		;Current lcd column, 0 = left-most colu
1002 =                  lcd_buf		ds	LCDBUFSZ	;backing buffer for scrolling, et
1022 =                  lcd_tempx	ds	2		;tenp store for x reg, used to calcula
1024 =                  lcd_buf_addr	ds	2		;used to store buffer address value
1026 =                  lcd_charx	ds	3		;temp store for x reg - used to preser
                        ;
1029 =                  pdatax		ds	2		;Temp pdata x store
                        ;
                        ;Main code	
                        ;
                        		code
0100 =                  		org	$0100
                        ;
                        ;=====================================================
                        ;
0100 : bd028a           start		jsr	piab_init	;Initalize PIAB
0103 : bd029c           		jsr 	lcd_init	;Initialize lcd dsiplay
                        ;
                        
AS02 Assembler for M6802 [1.42].                                     Page    2
------------------------------------ lcd -------------------------------------

0106 :                  inchlp		;jsr	INCH
                        		;jsr	lcd_outch
                        		;bra	inchlp
                        
                        
                        
0106 : ce0160           more		ldx	#STR1
0109 : 8d42             		bsr	lcd_pdata
010b : ce0000           		ldx	#$0
010e : bd0310           		jsr	ldelay
0111 : ce016a           		ldx	#STR2
0114 : 8d37             		bsr	lcd_pdata
0116 : ce0000           		ldx	#$0
0119 : bd0310           		jsr	ldelay
                        		;jmp	CONTRL
011c : ce0171           		ldx	#STR3
011f : 8d2c             		bsr	lcd_pdata
0121 : ce0000           		ldx	#$0
0124 : bd0310           		jsr	ldelay
0127 : ce0179           		ldx	#STR4
012a : 8d21             		bsr	lcd_pdata
012c : ce0000           		ldx	#$0
012f : bd0310           		jsr	ldelay
0132 : ce017c           		ldx	#STR5
0135 : 8d16             		bsr	lcd_pdata
0137 : ce0000           		ldx	#$0
013a : bd0310           		jsr	ldelay
013d : ce0189           		ldx	#STR6
0140 : 8d0b             		bsr	lcd_pdata
0142 : ce0000           		ldx	#$0
0145 : bd0310           		jsr	ldelay
0148 : 20bc             		bra	more
                        ;
014a : 7ee0e3           		jmp	CONTRL	
                        ;
014d : ff1029           lcd_pdata   	stx	pdatax
0150 : a600             		ldaa     0,x            ; output area of memory as t
0152 : 8104                     	cmpa    #EOT            ;until eot(04) is fou
0154 : 2709                     	beq     pdata_exit
0156 : bd01a2           		jsr 	lcd_outch
0159 : fe1029           		ldx	pdatax
015c : 08               		inx
015d : 20ee             		bra	lcd_pdata
015f : 39               pdata_exit     	rts
                        ;
                        
                        ;test strings
                        ;
0160 : 0c4c696e652031.. STR1		db	FF,"Line 1",CR,LF,EOT
016a : 4c696e65203204   STR2		db	"Line 2",EOT
0171 : 204c696e65203304 STR3		db	" Line 3",EOT
0179 : 0a2a04           STR4		db	LF, "*",EOT
017c : 54686973207772.. STR5		db	"This wrapped",EOT
0189 : 0c57656c636f6d.. STR6		db	FF,"Welcome to the display!",EOT
                        ;
                        ;####################################
                        ;Driver code
                        ;####################################
                        ;
                        		include		"lcd_driver.asm"
                        		title "lcd_driver"
                        ;=====================================================
AS02 Assembler for M6802 [1.42].                                     Page    3
--------------------------------- lcd_driver ---------------------------------

                        ;LCD driver for up to 4x40 LCD displays.
                        ;
                        ;NOTE: Current version only supports scrolling on 2x16
                        ;
                        ;Display is connected to the PIA as folows:
                        ;
                        ;PIA D0 - Enabled display active high
                        ;PIA D1 - Spare
                        ;PIA D2 - R/W
                        ;PIA D3 - E
                        ;PIA D4 - Display D4
                        ;PIA D5 - Display D5
                        ;PIA D6 - Display D6	 
                        ;PIA D7 - Display D7
                        ;
                        ;...display operates in 4-bit mode
                        ;
                        ;IMPORTANT: D0 needs to be high for the lcd display to
                        ;via lcd_outch.
                        ;
                        ;Code is designed to be included (using 'include') wit
                        ;Include all the equates and storage defined in the ne
                        ;
                        ;The use this driver, call the following:
                        ;
                        ;piab_init - initializes the PIA
                        ;lcd_init - initializes the LCD display
                        ;
                        ;Note: Driver uses a lot of async delays that assume a
                        ;
                        ;Use lcd_outch to display characters.
                        ;This routine processes CR, LF, BS and FF (clear scree
                        ;7F (RUBOUT) and all other ctrl characters are ignored
                        ;lcd_cursor can be used to set the cursor outside of l
                        ;
                        ;=====================================================
                        ;
                        ;All these equates must be included in the calling cod
                        ;
                        ;Equates
                        ;
                        ;PIABPR         equ     $8012
                        ;PIABCN		equ	$8013
                        ;
                        ; Common ASCII control codes
                        ;
                        ;EOT            equ     $04
                        ;BS             equ     $08
                        ;LF             equ     $0a
                        ;FF		equ	$0c
                        ;CR             equ     $0d
                        ;NULL		equ	$0
                        ;RUB		equ	$7f
                        ;
                        ;SPACE		equ	$20	;space character
                        ;
                        ;LCD constants
                        ;
                        ;LCDWIDTH	equ	16			;16x2 display
                        ;LCDROWS	equ	2
                        ;LCDBUFSZ       equ     LCDWIDTH*LCDROWS        ;size 
                        ;
AS02 Assembler for M6802 [1.42].                                     Page    4
--------------------------------- lcd_driver ---------------------------------

                        ; RAM area
                        ;
                        ;lcd_row		ds	1		;Current lcd row, 0 = top row	
                        ;lcd_col		ds	1		;Current lcd column, 0 = left-most col
                        ;lcd_buf		ds	LCDBUFSZ	;backing buffer for scrolling, e
                        ;lcd_tempx	ds	2			;tenp store for x reg, used to calcu
                        ;lcd_buf_addr	ds	2			;used to store buffer address val
                        ;lcd_charx	ds	3			;temp store for x reg - used to pres
                        ;
                        ;=====================================================
                        ;
                        ;####################################
                        ;Driver code
                        ;####################################
                        ;
                        ;Output character in a reg to display
                        ;
                        ;Ignore null, prcesses CR, LF, FF and BS correctly, ev
                        ;as a regular character. Display will scroll when last
                        ;a and x are retained, row and col values are modified
                        ;
01a2 : 36               lcd_outch	psha
01a3 : f68012           		ldab	PIABPR		;if D0 of PIA is low, skip outputing ch
01a6 : c401             		andb	#$01
01a8 : 275e             		beq	outretsb
01aa : 8100             		cmpa	#NULL		;if null, then do nothing
01ac : 275a             		beq	outretsb	
01ae : 817f             		cmpa	#RUB		;ignore rubout chars, so do nothing
01b0 : 2756             		beq	outretsb
01b2 : 810d             		cmpa	#CR		;is it a CR?
01b4 : 2609             		bne	islf		;if not, branch
01b6 : b61000           		ldaa	lcd_row		;for CR, set cursor to col 0
01b9 : 5f               		clrb		
01ba : bd0394           		jsr	lcd_cursor
01bd : 207b             		bra	outret
                        ;
01bf : 810a             islf		cmpa	#LF		;is it a LF?	
01c1 : 261e             		bne	isbs		;if not, branch
01c3 : b61000           		ldaa	lcd_row		;iscroll if needed
01c6 : 8101             		cmpa	#LCDROWS-1	;check if we are on the last line
01c8 : 260e             		bne	islf1		;is on last line, just scroll
01ca : b61001           		ldaa	lcd_col		;get the current col
01cd : bd023c           		jsr	lcd_scroll	;scroll display, a is preserved
01d0 : 16               		tab			;set back cursor after scroll
01d1 : 8601             		ldaa	#LCDROWS-1
01d3 : bd0394           		jsr	lcd_cursor
01d6 : 2062             		bra	outret
                        ;
01d8 : 4c               islf1		inca
01d9 : f61001           		ldab	lcd_col
01dc : bd0394           		jsr	lcd_cursor
01df : 2059             		bra	outret
                        ;
01e1 : 8108             isbs		cmpa	#BS		;is it a BS?
01e3 : 261c             		bne	isff		;if not, branch
01e5 : f61001           		ldab	lcd_col		;load current column
01e8 : 2750             		beq	outret		;skip if already at zero column
01ea : 5a               		decb			;move back one space
01eb : b61000           		ldaa	lcd_row		;load row
01ee : bd0394           		jsr	lcd_cursor  	;point to previous character
01f1 : 8620             		ldaa	#SPACE		;clear current character
01f3 : 8dad             		jsr	lcd_outch
AS02 Assembler for M6802 [1.42].                                     Page    5
--------------------------------- lcd_driver ---------------------------------

01f5 : b61000           		ldaa	lcd_row		;load cursor position again
01f8 : f61001           		ldab	lcd_col
01fb : 5a               		decb			;move back one space
01fc : bd0394           		jsr	lcd_cursor
01ff : 2039             		bra	outret
                        ;
0201 : 810c             isff		cmpa	#FF		;is it a form feed (clear screen)?
0203 : 2605             		bne	regchar
0205 : bd02e9           		jsr	lcd_clear	;clear screen
0208 : 2030             outretsb	bra	outret		;label is so a short branch will 
                        ;
                        ;display a regular character. Wraps text and scrolls d
                        ;
020a : 8120             regchar		cmpa	#SPACE		;skip for any control characters
020c : 2d2c             		blt	outret
020e : f61001           		ldab	lcd_col		;test if at end of row
0211 : c110             		cmpb	#LCDWIDTH
0213 : 261f             		bne	regchar1	
0215 : f61000           		ldab	lcd_row		;now check if we are on the last row
0218 : c101             		cmpb	#LCDROWS-1
021a : 270d             		beq	regchar2
021c : 36               		psha			;if not on the last row, send CR,LF then disp
021d : 860d             		ldaa	#CR
021f : 8d81             		jsr	lcd_outch
0221 : 860a             		ldaa	#LF
0223 : bd01a2           		jsr	lcd_outch
0226 : 32               		pula
0227 : 200b             		bra	regchar1		
0229 : bd023c           regchar2	jsr	lcd_scroll	;Last line reached, so scroll
022c : 36               		psha
022d : 8601             		ldaa	#LCDROWS-1	;set cursor to left most column
022f : 5f               		clrb
0230 : bd0394           		jsr	lcd_cursor
0233 : 32               		pula
0234 : bd0325           regchar1	jsr	lcd_char	;display character
0237 : 7c1001           		inc	lcd_col		;inc stored col count
023a : 32               outret		pula
023b : 39               		rts	
                        ;
                        ;
                        ;Scroll display up one line. Handles all formats of di
                        ;
                        ;Read a line from ther backing store and write to the 
                        ;then write a line of spaces to the last line.
                        ;Routine preserves a reg
                        ;NOTE: This is hardcode for 2 row displays - see comme
                        ;
                        ;Calculate backing store offset, store in lcd_tempx
                        ;
023c : 36               lcd_scroll	psha
023d : 5f               		clrb			;clear offset
023e : 8601             		ldaa	#$1		;start at row 1 ***********TEMP, FIX FOR L
0240 : cb10             scrlcont	addb	#LCDWIDTH	
0242 : 4a               		deca
0243 : 26fb             		bne	scrlcont	;done with calculating offset	
                        ;		
0245 : 1b               		aba			;store final offset in a
0246 : ce1002           		ldx	#lcd_buf	;load start of buffer address into x
0249 : ff1024           		stx	lcd_buf_addr	;store in memory so we can split in
024c : f61025           		ldab	lcd_buf_addr+1	;load the lsb of the buffer addr
024f : 1b               		aba			;add offset (which will always be < 4x40, max 
0250 : b71023           		staa	lcd_tempx+1	;store lsb in temp mem address		
AS02 Assembler for M6802 [1.42].                                     Page    6
--------------------------------- lcd_driver ---------------------------------

0253 : b61024           		ldaa	lcd_buf_addr	;load the msb of the buffer addres
0256 : 8900             		adca	#$0		;add the carry to the msb (this is a 8 + 1
0258 : b71022           		staa	lcd_tempx	;store result in temp
025b : fe1022           		ldx	lcd_tempx	;load full 16 bit address value into x
                        ;	
025e : 4f               		clra			;TEMP hard coded as row 0
025f : 5f               		clrb
0260 : bd0394           		jsr	lcd_cursor	;point to next row to be copied to
0263 : c610             		ldab	#LCDWIDTH	;load col counter with display width
0265 : a600             scrlcp		ldaa	0,x		;load current character from backing
0267 : 37               		pshb			;preserve b
0268 : bd0325           		jsr	lcd_char	;write character	
026b : 7c1001           		inc	lcd_col		;increament store col count
026e : 33               		pulb			;get back b
026f : 08               		inx			;point to next char in backing store
0270 : 5a               		decb	
0271 : 26f2             		bne	scrlcp		;done with copying row?
                        ;
                        ;Clear last line
                        ;
0273 : 8601             		ldaa	#LCDROWS-1
0275 : 5f               		clrb
0276 : bd0394           		jsr	lcd_cursor
0279 : c610             		ldab	#LCDWIDTH	
027b : 8620             		ldaa	#SPACE
027d : 37               scrlcll		pshb
027e : bd0325           		jsr	lcd_char
0281 : 7c1001           		inc	lcd_col		;increment stored col count
0284 : 33               		pulb
0285 : 5a               		decb
0286 : 26f5             		bne	scrlcll
                        ;
0288 : 32               		pula
0289 : 39               		rts
                        ;
                        ;Init PIAB as 8 bits of output lines
                        ;
028a : 4f               piab_init	clra                    ;set up PIA
028b : b78013           		staa    PIABCN
028e : 86fe             		ldaa    #$fe		;set PIA ad D0 input, D1-D7 as output
0290 : b78012           		staa    PIABPR
0293 : 8604             		ldaa    #$04
0295 : b78013           		staa    PIABCN
0298 : 7f8012           		clr     PIABPR
029b : 39               		rts
                        ;
                        ;Init lcd display
                        ;Lots off odd timing here. Also, we have to start by s
                        ;30h commands to resync the display into reading 8 bit
                        ;
029c : ce04e2           lcd_init	ldx	#1250		;wait 100ms0
029f : 8d6f             		bsr	ldelay
02a1 : 8630             		ldaa	#$30		;start by sending three 30h commands	
02a3 : 8d6f             		bsr 	lcd_cmd8
02a5 : ce0271           		ldx	#625		;wait 5ms
02a8 : 8d66             		bsr	ldelay
02aa : 8630             		ldaa	#$30
02ac : 8d66             		bsr 	lcd_cmd8
02ae : c611             		ldab	#17		;wait 100us
02b0 : 8d5a             		bsr	sdelay
02b2 : 8630             		ldaa	#$30
02b4 : 8d5e             		bsr 	lcd_cmd8
AS02 Assembler for M6802 [1.42].                                     Page    7
--------------------------------- lcd_driver ---------------------------------

02b6 : c611             		ldab	#17		;wait 100us	
02b8 : 8d52             		bsr 	sdelay	
02ba : 8620             		ldaa	#$20		;Set to 4 bit mode
02bc : 8d56             		bsr 	lcd_cmd8
02be : c611             		ldab	#17
02c0 : 8d4a             		bsr	sdelay		;wait 100us
                        ;
                        ;Done with 8 bit access, now in 4 bit mode
                        ;
02c2 : 8628             		ldaa	#$28		;set to 2 line 5x7 mode
02c4 : bd0374           		jsr 	lcd_cmd
02c7 : c609             		ldab	#9		;wait 50us
02c9 : 8d41             		bsr	sdelay
02cb : 8608             		ldaa	#$08		;set display off
02cd : bd0374           		jsr 	lcd_cmd
02d0 : c609             		ldab	#9		;wait 50us
02d2 : 8d38             		bsr	sdelay
02d4 : 8606              		ldaa	#$06		;no shift, cursor increases
02d6 : bd0374           		jsr 	lcd_cmd
02d9 : c609             		ldab	#9		;wait 50us
02db : 8d2f             		bsr	sdelay
02dd : 860e             		ldaa	#$0e		;display on, cursor on
                        		;ldaa	#$0f		;display on, cursor on, cursor blink
02df : bd0374           		jsr 	lcd_cmd
02e2 : c609             		ldab	#9		;wait 50us
02e4 : 8d26             		bsr	sdelay	
02e6 : 8d01             		bsr 	lcd_clear		;clear display, home cursor
02e8 : 39               		rts
                        ;
                        ;Clear screen, set cursor to home positiom
                        ;
02e9 : ff1026           lcd_clear	stx	lcd_charx	;preserve x
02ec : 8601             		ldaa    #$01            ;clear screen
02ee : bd0374           		jsr     lcd_cmd
02f1 : c6ff             		ldab    #$ff            ;delay for 1.53ms after clea
02f3 : 8d17             		bsr     sdelay
02f5 : 7f1000           		clr	lcd_row		;reset local copy of cursor position
02f8 : 7f1001           		clr	lcd_col
02fb : ce1002           		ldx	#lcd_buf	;clear lcd backing buffer (write spaces
02fe : 8620             		ldaa	#SPACE		;load a space character
0300 : a700             clearlp		staa	0,x		;store in buffer	
0302 : 08               		inx
0303 : 8c1022           		cpx	#lcd_buf+LCDBUFSZ
0306 : 26f8             		bne	clearlp
0308 : fe1026           		ldx	lcd_charx	;restore x
030b : 39               		rts
                        ;
                        ;Short delay, delay value passed in b
                        ;Delay = (2+4)*b in microseconds
                        ;
030c : 5a               sdelay		decb			;decrement b
030d : 26fd             		bne sdelay
030f : 39               		rts
                        ;
                        ;Long delay, delay valaue passed in x
                        ;Delay = (4+4)*x in microseconds
                        ;
0310 : 09               ldelay		dex
0311 : 26fd             		bne ldelay
0313 : 39               		rts
                        ;
                        ;Send lcd command when display is in 8 bit mode
AS02 Assembler for M6802 [1.42].                                     Page    8
--------------------------------- lcd_driver ---------------------------------

                        ;Note: this is only used during init
                        ;
0314 : 0f               lcd_cmd8	sei
0315 : 36               		psha			;Save a reg
0316 : 84f0             		anda	#$f0		;remove lower nibble since display is wir
0318 : 8a08             		oraa	#$08		;Set RS = 0, E = 1
031a : b78012           		staa	PIABPR		;output PIA
                        					;placeholder - delay needed if hold time <10ns
031d : 84f7             		anda	#$F7		;set RS = 0, E = 0
031f : b78012           		staa	PIABPR		;leave date as-is but set E = 0
0322 : 32               		pula			;restore a reg
0323 : 0e               		cli
0324 : 39               		rts	
                        ;
                        ;Send character in a reg to LCD. A contains full 8 bit
                        ;Note: a reg is preserved, b is not, x is preserved
                        ;Also store character in backing buffer
                        ;
0325 : 0f               lcd_char	sei
0326 : 36               		psha                    ;Save a reg
0327 : ff1026           		stx	lcd_charx	;preserve x
032a : 16               		tab			;send high nible first
032b : c4f0             		andb	#$f0
032d : ca0c             		orab	#$0c		;set RS = 1, E = 1
032f : f78012           		stab	PIABPR		;send to PIA
                        					;placeholder - delay needed if hold time <10ns
0332 : c4f7             		andb	#$F7		;set E = 0, RS = 0
0334 : f78012           		stab	PIABPR		;send to PIA
0337 : 48                               lsla                    ;Shift data to
0338 : 48                               lsla
0339 : 48                               lsla
033a : 48                               lsla
033b : 8a0c             		oraa    #$0c            ;set RS = 1, E = 1			 
033d : b78012           		staa	PIABPR          ;send lower nibble to PIA
                        					;placeholder - delay needed if hold time <10ns
0340 : 84f7             		anda    #$F7            ;set E = 0
0342 : b78012           		staa	PIABPR		;send to PIA
                        ;
                        ;Save character to backing store
                        ;
0345 : 5f               		clrb
0346 : b61000           		ldaa	lcd_row		;get current row
0349 : 2705             lcd_addrow	beq	lcd_addcol	;done with row adds
034b : cb10             		addb	#LCDWIDTH			
034d : 4a               		deca
034e : 20f9             		bra	lcd_addrow
0350 : fb1001           lcd_addcol	addb	lcd_col		;add the column offset	
0353 : 17               		tba			;store final offset in a
0354 : ce1002           		ldx	#lcd_buf	;load start of buffer address into x
0357 : ff1024           		stx	lcd_buf_addr	;store in memory so we can split in
035a : f61025           		ldab	lcd_buf_addr+1	;load the lsb of the buffer addr
035d : 1b               		aba			;add offset (which will always be < 4x40, max 
035e : b71023           		staa	lcd_tempx+1	;store lsb in temp mem address		
0361 : b61024           		ldaa	lcd_buf_addr	;load the msb of the buffer addres
0364 : 8900             		adca	#$0		;add the carry to the msb (this is a 8 + 1
0366 : b71022           		staa	lcd_tempx	;store result in temp
                        ;	
0369 : 32               		pula			;restore character
036a : fe1022           		ldx	lcd_tempx	;store char in backing buffer based on
036d : a700             		staa	0,x
036f : fe1026           		ldx	lcd_charx	;restore x
0372 : 0e               		cli
AS02 Assembler for M6802 [1.42].                                     Page    9
--------------------------------- lcd_driver ---------------------------------

0373 : 39               		rts
                        ;
                        ;Send command in a reg to LCD. A contains full 8 bit c
                        ;Note: a reg is preserved, b is not
                        ;
0374 : 0f               lcd_cmd		sei
0375 : 36               		psha                    ;Save a reg
0376 : 16               		tab                     ;send high nible first
0377 : c4f0             		andb    #$f0
0379 : ca08             		orab    #$08            ;set RS = 0, E = 1
037b : f78012           		stab    PIABPR          ;send to PIA
                        					;placeholder - delay needed if hold time <10ns
037e : c4f3             		andb    #$F3            ;set E = 0, RS = 0
0380 : f78012           		stab    PIABPR          ;send to PIA
0383 : 48               		lsla                    ;Shift data to upper nibble 
0384 : 48               		lsla
0385 : 48               		lsla
0386 : 48               		lsla
0387 : 8a08             		oraa    #$08            ;set RS = 0, E = 1          
0389 : b78012           		staa    PIABPR          ;send lower nibble to PIA
                        					;placeholder - delay needed if hold time <10ns
038c : 84f3             		anda    #$F3            ;set E = 0
038e : b78012           		staa    PIABPR          ;send to PIA
0391 : 32               		pula
0392 : 0e               		cli
0393 : 39               		rts
                        ;
                        ;Set cursor position. Row in a, col in b, zero == lowe
                        ;The command to do this is 80h + (row * 40h (so line s
                        ;
0394 : b71000           lcd_cursor	staa	lcd_row		;store local copies of row an
0397 : f71001           		stab	lcd_col	
039a : 48               		lsla			;Multiply row number by 40h
039b : 48               		lsla
039c : 48               		lsla
039d : 48               		lsla
039e : 48               		lsla
039f : 48               		lsla
03a0 : 8a80             		ora	#$80		;add to command
03a2 : 1b               		aba			;add col to address
03a3 : 8dcf             		bsr	lcd_cmd		;send to display
03a5 : 39               		rts
                        
                        		
                        		
                        
                        
No errors in pass 2.
